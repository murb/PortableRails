.TH RAKE 1 "Ruby Programmers Reference Guide" "November 30, 2008" "UNIX"
.SH NAME
\fBrake\fP
\- Ruby Make
.SH SYNOPSIS
.br
\fBrake\fP
[\fB\--f\fP \fIRakefile\fP]
[\fB\--version\fP]
[\fB\-CGNPgnqstv\fP]
[\fB\-D\fP [\fIPATTERN\fP]]
[\fB\-E\fP \fICODE\fP]
[\fB\-I\fP \fILIBDIR\fP]
[\fB\-R\fP \fIRAKELIBDIR\fP]
[\fB\-T\fP [\fIPATTERN\fP]]
[\fB\-e\fP \fICODE\fP]
[\fB\-p\fP \fICODE\fP]
[\fB\-r\fP \fIMODULE\fP]
[\fB\--rules\fP]
[\fIvariable\fP=\fIvalue\fP]
\fItarget\fP ...
.SH DESCRIPTION
\fBRake\fP
is a simple
\fBruby\fP(1)
build program with capabilities similar to the regular
\fBmake\fP(1)
command.

\fBRake\fP
has the following features:
.IP \(bu
Rakefiles (Rake's version of Makefiles) are completely defined in standard Ruby syntax.
No XML files to edit. No quirky Makefile syntax to worry about (is that a tab or a space?).
.IP \(bu
Users can specify tasks with prerequisites.
.IP \(bu
Rake supports rule patterns to sythesize implicit tasks.
.IP \(bu
Flexible FileLists that act like arrays but know about manipulating file names and paths.
.IP \(bu
A library of prepackaged tasks to make building rakefiles easier.

.SH OPTIONS

.TP
\fB\--version\fP
Display the program version.

.TP
\fB\-C\fP
.TP
\fB\--classic-namespace\fP
Put Task and FileTask in the top level namespace

.TP
\fB\-D\fP [\fIPATTERN\fP]
.TP
\fB\--describe\fP [\fIPATTERN\fP]
Describe the tasks (matching optional
\fIPATTERN\fP
), then exit.

.TP
\fB\-E\fP \fICODE\fP
.TP
\fB\--execute-continue\fP \fICODE\fP
Execute some Ruby code, then continue with normal task processing.

.TP
\fB\-G\fP
.TP
\fB\--no-system\fP
.TP
\fB\--nosystem\fP
Use standard project Rakefile search paths, ignore system wide rakefiles.

.TP
\fB\-I\fP \fILIBDIR\fP
.TP
\fB\--libdir\fP \fILIBDIR\fP
Include
\fILIBDIR\fP
in the search path for required modules.

.TP
\fB\-N\fP
.TP
\fB\--no-search\fP
.TP
\fB\--nosearch\fP
Do not search parent directories for the Rakefile.

.TP
\fB\-P\fP
.TP
\fB\--prereqs\fP
Display the tasks and dependencies, then exit.

.TP
\fB\-R\fP \fIRAKELIBDIR\fP
.TP
\fB\--rakelib\fP \fIRAKELIBDIR\fP
.TP
\fB\--rakelibdir\fP \fIRAKELIBDIR\fP
Auto-import any .rake files in
\fIRAKELIBDIR\fP.
(default is
\fIrakelib\fP
)

.TP
\fB\-T\fP [\fIPATTERN\fP]
.TP
\fB\--tasks\fP [\fIPATTERN\fP]
Display the tasks (matching optional
\fIPATTERN\fP
) with descriptions, then exit.

.TP
\fB\-e\fP \fICODE\fP
.TP
\fB\--execute\fP \fICODE\fP
Execute some Ruby code and exit.

.TP
\fB\-f\fP \fIFILE\fP
.TP
\fB\--rakefile\fP \fIFILE\fP
Use FILE as the rakefile.

.TP
\fB\-h\fP
.TP
\fB\--help\fP
Prints a summary of options.

.TP
\fB\-g\fP
.TP
\fB\--system\fP
Using system wide (global) rakefiles (usually
\fI~/.rake/*.rake\fP
).

.TP
\fB\-n\fP
.TP
\fB\--dry-run\fP
Do a dry run without executing actions.

.TP
\fB\-p\fP \fICODE\fP
.TP
\fB\--execute-print\fP \fICODE\fP
Execute some Ruby code, print the result, then exit.

.TP
\fB\-q\fP
.TP
\fB\--quiet\fP
Do not log messages to standard output.

.TP
\fB\-r\fP \fIMODULE\fP
.TP
\fB\--require\fP \fIMODULE\fP
Require MODULE before executing rakefile.

.TP
\fB\-s\fP
.TP
\fB\--silent\fP
Like
\fB\--quiet\fP,
but also suppresses the 'in directory' announcement.

.TP
\fB\-t\fP
.TP
\fB\--trace\fP
Turn on invoke/execute tracing, enable full backtrace.

.TP
\fB\-v\fP
.TP
\fB\--verbose\fP
Log message to standard output (default).

.TP
\fB\--rules\fP
Trace the rules resolution.


.SH SEE ALSO
\fBruby\fP(1)
\fBmake\fP(1)

http://rake.rubyforge.org/
.SH REPORTING BUGS
Bugs, features requests and other issues can be logged at
<\fBhttp://onestepback.org/redmine/projects/show/rake\fR>.

You will need an account to before you can post issues. Register at <\fBhttp://onestepback.org/redmine/account/register\fR>.
Or you can send an email to the author.
.SH AUTHOR
\fBRake\fP
is written by
Jim Weirich <jim@weirichhouse.org>
